=head2 Package Win32::GUI::Graphic

L<Back to the Packages|guipacks/>

=over

=item *

L<Constructor>

=over

=item *

L<new Win32::GUI::Graphic(PARENT, %OPTIONS)|/new_Win32_GUI_Graphic_PARENT_>

=back

=item *

L<Methods>

=over

=item *

L<GetDC()|/GetDC_>

=back

=item *

L<Events>

=over

=item *

L<Paint()|/Paint_>

=back

=back

=head3 Constructor

=over 4

=for html <A NAME="new_Win32_GUI_Graphic_PARENT_">

=item new Win32::GUI::Graphic(PARENT, %OPTIONS)

Creates a new Graphic object;
can also be called as PARENT->AddGraphic(%OPTIONS).
Class specific %OPTIONS are:

=for html <P>

=back

=head3 Methods

=over 4

=for html <A NAME="GetDC_">

=item GetDC()

Returns the DC object associated with the window.

=for html <P>

=back

=head3 Events

=over 4

=for html <A NAME="Paint_">

=item Paint()

Sent when the Graphic object needs to be repainted.
Note that you need to use GetDC() to get the DC
of the Graphic object where you do your paint
work, and then Validate() the DC to inform Windows
that you painted the DC area (otherwise it will
continue to call the Paint event continuously).
Example:

  sub Graphic_Paint {
      my $DC = $Window->Graphic->GetDC();
      $DC->MoveTo(0, 0);
      $DC->LineTo(100, 100);
      $DC->Validate();
  }

=for html <P>

=back

=cut
